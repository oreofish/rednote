require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe LikesController do
  render_views

  before(:each) do
    @user = Factory(:user)
    sign_in @user
    @user2 = Factory(:user, :email => Factory.next(:email))

    @note = Factory(:note, :user => @user)
    @note2 = Factory(:note, :user => @user2)
    @attr = { 
      :user_id => @user.id,
      :note_id => @note2.id,
      :status => false
    }
  end

  # This should return the minimal set of attributes required to create a valid
  # Like. As you add validations to Like, be sure to
  # update the return value of this method accordingly.
  
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # LikesController. Be sure to keep this updated too.
  describe "POST create" do
    describe "with valid params" do
      it "creates a new Like" do
        expect {
          xhr :post, :create, :note_id => @note.id
        }.to change(Like, :count).by(1)
      end

      it "creates a new comments when creating a new like" do
        xhr :post, :create, :note_id => @note.id
        assigns(:like).save
        change(Comment, :count).by(1)
      end

      it "add the message when creating a new like with other user" do
        xhr :post, :create, :note_id => @note2.id
        assigns(:like).save
        change(@note2, :message).by(1)
      end

      it "should not add the message when creating a new like with owner" do
        xhr :post, :create, :note_id => @note.id
        assigns(:like).save
        change(@note, :message).by(0)
      end

      it "assigns a newly created like as @like" do
        xhr :post, :create, :note_id => @note.id
        assigns(:like).should be_a(Like)
        assigns(:like).status.should eq(false)
        assigns(:like).should be_persisted
      end

      it "redirects to the create" do
        xhr :put, :create, {:note_id => @note.id}
        response.should render_template("create")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested like" do
        like = Like.create! @attr
        xhr :put, :update, {:id => like.id}
        assigns(:like).status.should eq(true)
      end

      it "redirects to the update" do
        like = Like.create! @attr
        xhr :put, :update, {:id => like.to_param}
        response.should render_template("update")
      end

      it "redirects to the root_url when you are the wrong user " do
        like = Like.create! @attr
        sign_out @user
        sign_in @user2
        xhr :put, :update, {:id => like.to_param}
        response.should redirect_to(root_url)
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested like" do
      like = Like.create! @attr
      expect {
        xhr :delete, :destroy, {:id => like.id}
      }.to change(Like, :count).by(-1)
    end

    it "redirects to the likes list" do
      like = Like.create! @attr
      xhr :delete, :destroy, {:id => like.id}
      response.should render_template("destroy")
    end

    it "redirects to the root_url when you are the wrong user " do
      like = Like.create! @attr
      sign_out @user
      sign_in @user2
      xhr :put, :destroy, {:id => like.to_param}
      response.should redirect_to(root_url)
    end
  end

end
