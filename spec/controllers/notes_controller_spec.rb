# encoding: utf-8
require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe NotesController do
  render_views
  # DO NOT test access deny since user can not call all controller before login.

  # This should return the minimal set of attributes required to create a valid
  # Note. As you add validations to Note, be sure to
  # update the return value of this method accordingly.
  before(:each) do 
    @user = Factory(:user)
    sign_in @user
  end
  
  def valid_attributes
    {
      :summary => "summary",
      :kind => 1,
      :description => "test description"
    }
  end

  describe "GET" do
    before(:each) do 
      @note1 = Factory(:note, :user => @user)
      @note2 = Factory(:note, :user => @user, :summary => Factory.next(:summary))
      @another_user = Factory(:user, :email => Factory.next(:email))
#      @another_notes = Array.new
#      0.upto(3).each do 
#        @another_notes << Factory(:note, :user => @another_user,
#                                  :summary => Factory.next(:summary))
#      end
    end

    describe "index" do
      it "assigns @notes contains notes" do
        get :index
        assigns(:notes).should eq([@note1, @note2])
      end

    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Note" do
        expect {
          xhr :post, :create, :note => valid_attributes
        }.to change(Note, :count).by(1)
      end

      it "assigns a newly created note as @note" do
        xhr :post, :create, :note => valid_attributes
        assigns(:note).should be_a(Note)
        assigns(:note).should be_persisted
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved note as @note" do
        # Trigger the behavior that occurs when invalid params are submitted
        Note.any_instance.stub(:save).and_return(false)
        xhr :post, :create, :note => {}
        assigns(:note).should be_a_new(Note)
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested note" do
      note = Factory(:note, :user => @user)
      expect {
        xhr :delete, :destroy, :id => note.id
      }.to change(Note, :count).by(-1)
    end
  end

  describe "DELETE be another user" do
    before(:each) do
      wrong_user = Factory(:user, :email => Factory.next(:email))
      sign_out(wrong_user)
      sign_in(wrong_user)
      @note1 = Factory(:note, :user => @user)
    end

    it "should deny access" do
      xhr :delete, :destroy, :id => @note1
      response.should redirect_to(root_url)
    end
  end
end
