require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe CommentsController do
  render_views
  
  before(:each) do 
    @user = Factory(:user)
    sign_in @user
    
    @note = Factory(:note, :user => @user)
  end
  
  # This should return the minimal set of attributes required to create a valid
  # Comment. As you add validations to Comment, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    { :title => 'title',
      :comment => 'some comments',
      :commentable_id => 1
    }
  end

  describe "GET index" do
    it "assigns all comments as @comments" do
      comment = @user.comments.create! valid_attributes
      comment.commentable = @note
      comment.save
      xhr :get, :index, :note_id => @note.id
      assigns(:comments).should eq([comment])
    end
  end

  describe "POST create" do
    before(:each) do
      @comment_arg = { :commentable_id => @note.id, :comment => valid_attributes }
    end
    
    describe "with valid params" do
      it "creates a new Comment" do
        expect {
          xhr :post, :create, :comment => @comment_arg
        }.to change(Comment, :count).by(1)
      end

      it "assigns a newly created comment as @comment" do
        xhr :post, :create, :comment => @comment_arg
        assigns(:comment).should be_a(Comment)
      end
    end
  end

  describe "DELETE destroy" do
    before(:each) do
      @comment = @user.comments.create! valid_attributes
      @comment.commentable = @note
      @comment.save
    end
    
    it "destroys the requested comment" do
      expect {
        xhr :delete, :destroy, :id => @comment.id
      }.to change(Comment, :count).by(-1)
    end

    it "re-render to the comment index" do
      xhr :delete, :destroy, :id => @comment.id
      response.should render_template("index")
    end
    
    it "redirects to the root_path with wrong user" do
      @another_user = Factory(:user, :email => Factory.next(:email))
      comment = @another_user.comments.create! valid_attributes
      xhr :delete, :destroy, :id => comment.id
      response.should redirect_to(root_path)
    end
  end

end
