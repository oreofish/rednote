require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe BooksController do
  before(:each) do
    @user = Factory(:user)
    sign_in @user
  end


  # This should return the minimal set of attributes required to create a valid
  # Book. As you add validations to Book, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
      {
         :title   =>  "title",
         :url     =>  "url",
         :cover   =>  "cover",
         :user_id =>  @user.id 
      }
  end

  describe "GET index" do
    it "assigns all books as @books" do
      book = Book.create! valid_attributes
      get :index 
      assigns(:books).should eq([book])
    end

    it "should display 'reading' when you are reading the book" do
      book1 = Book.create! valid_attributes
      book1.status = "reading"
      book1.save
      get :index
      assigns(:bookstatuslist)[0]["display"].should eq("reading")
    end

    it "should display '' with other books when you are reading one " do
      book1 = Book.create! valid_attributes
      book1.status = "reading"
      book1.save
      book2 = Book.create! valid_attributes
      get :index
      assigns(:bookstatuslist)[1]["display"].should eq("")
    end

    #it "can not in the queue for another book when you waiting one" do
    it "should display '' for another book when you waiting one" do
      book1 = Factory(:book)
      book2 = Factory(:book, :user_id => Factory.next(:user_id))
      debit1 = Debit.create!(:user_id => @user.id, :book_id => book1.id)
      get :index
      assigns(:bookstatuslist)[1]["display"].should eq("")
    end

    #it "can not in the queue for another book when you are reading one" do
    it "should display '' for another book when you are reading one" do
      book1 = Factory(:book)
      book1.status = "reading"
      book1.save
      book2 = Factory(:book, :user_id => Factory.next(:user_id))
      get :index
      assigns(:bookstatuslist)[1]["display"].should eq("")
    end

    it "should display 'waiting' when you are in the queue for the book what is readed by someone" do
      another_user = Factory(:user, :email => Factory.next(:email),
                             :nickname => Factory.next(:nickname))
      book1 = Book.create! valid_attributes.merge(:user_id => another_user.id)
      book1.status = "reading"
      book1.save
      debit1 = Debit.create!(:user_id => @user.id, :book_id => book1.id)
      get :index
      assigns(:bookstatuslist)[0]["display"].should eq("waiting")
    end

    it "should display 'borrow' when you are the first of the queue for the book what is keep" do
      book1 = Factory(:book)
      debit1 = Debit.create!(:user_id => @user.id, :book_id => book1.id)
      get :index
      assigns(:bookstatuslist)[0]["display"].should eq("borrow")
    end

    it "should display '' with other books when you are in the queue for one book" do
      book1 = Factory(:book)
      book2 = Factory(:book)
      debit1 = Debit.create!(:user_id => @user.id, :book_id => book1.id)
      get :index
      assigns(:bookstatuslist)[1]["display"].should eq("")
    end

    it "should display 'want_wait' when the book is readed by someone and you have nothing action" do
      another_user = Factory(:user, :email => Factory.next(:email),
                             :nickname => Factory.next(:nickname))
      book1 = Book.create! valid_attributes.merge(:user_id => another_user.id)
      book1.status = "reading"
      book1.save
      get :index
      assigns(:bookstatuslist)[0]["display"].should eq("want_wait")

    end

    it "should display 'borrow' when the book's status is keep and you have nothing action" do
      book1 = Factory(:book)
      get :index
      assigns(:bookstatuslist)[0]["display"].should eq("borrow")
    end

  end

  describe "get borrow" do
    it "can borrow (set status form keep to reading)" do
      @book = Factory(:book)
      get :borrow, {:book_id => @book.id}
      assigns(:book).status.should eq("reading")
    end

    it "can not borrow another book when reading a book" do
      book1 = Book.create! valid_attributes
      book1.status = "reading"
      book1.save
      book2 = Book.create! valid_attributes
      get :borrow, {:book_id => book2.id}
      assigns(:book).status.should_not eq("reading")
    end

  end

  describe "GET new" do
    it "assigns a new book as @book" do
      get :new
      assigns(:book).should be_a_new(Book)
    end
  end

 describe "POST create" do
   it "creates a new Book" do
     expect {
       post :create, {:book => valid_attributes}
     }.to change(Book, :count).by(1)
   end

   it "assigns a newly created book as @book" do
     post :create, {:book => valid_attributes}
     assigns(:book).should be_a(Book)
     assigns(:book).should be_persisted
   end

   it "redirects to the created book" do
     post :create, {:book => valid_attributes}
     response.should redirect_to(books_path)
   end
 end

end
